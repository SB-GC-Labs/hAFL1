From de84c02c14a9283c5e37447f527a44ba816f6d54 Mon Sep 17 00:00:00 2001
From: Steffen Schulz <steffen.schulz@intel.com>
Date: Thu, 11 Jun 2020 23:51:53 +0200
Subject: [PATCH 04/11] Convert Qemu printf to qemu_log, set and report disasm
 word width

---
 include/qemu/log.h |  1 +
 pt.c               | 28 +++++++++++++++-------------
 pt/debug.h         | 30 +++++++++++++++++++-----------
 pt/disassembler.c  |  2 +-
 pt/hypercall.c     | 38 ++++++++++++++++++++++----------------
 util/log.c         |  2 ++
 6 files changed, 60 insertions(+), 41 deletions(-)

diff --git a/include/qemu/log.h b/include/qemu/log.h
index f4724f73..5cc04ed7 100644
--- a/include/qemu/log.h
+++ b/include/qemu/log.h
@@ -64,6 +64,7 @@ static inline bool qemu_log_separate(void)
 #define CPU_LOG_PLUGIN     (1 << 18)
 /* LOG_STRACE is used for user-mode strace logging. */
 #define LOG_STRACE         (1 << 19)
+#define LOG_KAFL           (1 << 20)
 
 /* Lock output for a series of related logs.  Since this is not needed
  * for a single qemu_log / qemu_log_mask / qemu_log_mask_and_addr, we
diff --git a/pt.c b/pt.c
index 6e11c22e..60f5751d 100644
--- a/pt.c
+++ b/pt.c
@@ -45,7 +45,7 @@ void pt_sync(void){
 static inline int pt_cmd_hmp_context(CPUState *cpu, uint64_t cmd){
 	cpu->pt_ret = -1;
 	if(pt_hypercalls_enabled()){
-		QEMU_PT_PRINTF(PT_PREFIX, "Error: HMP commands are ignored if kafl tracing mode is enabled (-kafl)!");
+		QEMU_PT_ERROR(PT_PREFIX, "Error: HMP commands are ignored if kafl tracing mode is enabled (-kafl)!");
 	}
 	else{
 		cpu->pt_cmd = cmd;
@@ -171,7 +171,7 @@ int pt_set_cr3(CPUState *cpu, uint64_t val, bool hmp_mode){
 		return -EINVAL;
 	}
 	if (cpu->pt_c3_filter && cpu->pt_c3_filter != val){
-		//QEMU_PT_PRINTF(PT_PREFIX, "Reconfigure CR3-Filtering!");
+		QEMU_PT_DEBUG(PT_PREFIX, "Reconfigure CR3-Filtering!");
 		cpu->pt_c3_filter = val;
 		r += pt_cmd(cpu, KVM_VMX_PT_CONFIGURE_CR3, hmp_mode);
 		return r;
@@ -199,7 +199,7 @@ int pt_enable_ip_filtering(CPUState *cpu, uint8_t addrn, uint64_t ip_a, uint64_t
 	}
 		
 	if(ip_a > ip_b){
-		QEMU_PT_PRINTF(PT_PREFIX, "Error (ip_a > ip_b) 0x%lx-0x%lx", ip_a, ip_b);
+		QEMU_PT_ERROR(PT_PREFIX, "Error (ip_a > ip_b) 0x%lx-0x%lx", ip_a, ip_b);
 		return -EINVAL;
 	}
 
@@ -207,9 +207,9 @@ int pt_enable_ip_filtering(CPUState *cpu, uint8_t addrn, uint64_t ip_a, uint64_t
 		pt_disable_ip_filtering(cpu, addrn, hmp_mode);
 	}
 
-	buf = malloc(ip_b-ip_a);
+	buf = malloc(ip_b-ip_a); // TODO memory leak?
 	if(!read_virtual_memory(ip_a, buf, ip_b-ip_a, cpu)){
-		QEMU_PT_PRINTF(PT_PREFIX, "Error (cannot dump trace region) 0x%lx-0x%lx (size: %lx)", ip_a, ip_b, (ip_b-ip_a));
+		QEMU_PT_ERROR(PT_PREFIX, "Error (cannot dump trace region) 0x%lx-0x%lx (size: %lx)", ip_a, ip_b, (ip_b-ip_a));
 		free(buf);
 		return -EINVAL;
 	}
@@ -226,7 +226,7 @@ int pt_enable_ip_filtering(CPUState *cpu, uint8_t addrn, uint64_t ip_a, uint64_t
 #endif
 
 
-	QEMU_PT_PRINTF(PT_PREFIX, "Configuring new trace region (addr%d, 0x%lx-0x%lx)", addrn, ip_a, ip_b);
+	QEMU_PT_DEBUG(PT_PREFIX, "Configuring new trace region (addr%d, 0x%lx-0x%lx)", addrn, ip_a, ip_b);
 	
 	switch(addrn){
 		case 0:
@@ -302,7 +302,9 @@ void pt_kvm_init(CPUState *cpu){
 
 	cpu->patches_enable_pending = false;//TODO don't enable this
 	cpu->patches_disable_pending = false;
-	cpu->disassembler_word_width = 64;
+   	// setting the target's word with is critical to RQ operation
+	// Initialize as invalid, set by submit_CR3 or submit_mode hypercalls
+	cpu->disassembler_word_width = 0;
 
 	cpu->pt_c3_filter = 0;
 	cpu->pt_target_file = NULL;
@@ -327,14 +329,14 @@ void pt_pre_kvm_run(CPUState *cpu){
 #ifdef CONFIG_REDQUEEN
 
 	if(cpu->patches_disable_pending){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "patches disable");
+		QEMU_PT_DEBUG(REDQUEEN_PREFIX, "patches disable");
 		patcher_t* patcher = qemu_get_cpu(0)->redqueen_patch_state;
 		pt_disable_patches(patcher);
 		cpu->patches_disable_pending = false;
 	}
 
 	if(cpu->patches_enable_pending){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "patches enable");
+		QEMU_PT_DEBUG(REDQUEEN_PREFIX, "patches enable");
 		patcher_t* patcher = qemu_get_cpu(0)->redqueen_patch_state;
 		pt_enable_patches(patcher);
 		cpu->patches_enable_pending = false;
@@ -342,7 +344,7 @@ void pt_pre_kvm_run(CPUState *cpu){
 
 
 	if(cpu->redqueen_enable_pending){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "rq enable");
+		QEMU_PT_DEBUG(REDQUEEN_PREFIX, "rq enable");
 		for(uint8_t i = 0; i < INTEL_PT_MAX_RANGES; i++){
 			if (cpu->redqueen_state[i]){
 				enable_rq_intercept_mode(cpu->redqueen_state[i]);
@@ -353,7 +355,7 @@ void pt_pre_kvm_run(CPUState *cpu){
 	}
 
 	if(cpu->redqueen_disable_pending){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "rq disable");
+		QEMU_PT_DEBUG(REDQUEEN_PREFIX, "rq disable");
 		for(uint8_t i = 0; i < INTEL_PT_MAX_RANGES; i++){
 			if (cpu->redqueen_state[i]){
 				disable_rq_intercept_mode(cpu->redqueen_state[i]);
@@ -366,7 +368,7 @@ void pt_pre_kvm_run(CPUState *cpu){
 	if (!cpu->pt_fd) {
 		cpu->pt_fd = kvm_vcpu_ioctl(cpu, KVM_VMX_PT_SETUP_FD, (unsigned long)0);
 		ret = ioctl(cpu->pt_fd, KVM_VMX_PT_GET_TOPA_SIZE, (unsigned long)0x0);
-		//printf("TOPA SIZE: %lx\n", ret);
+		QEMU_PT_DEBUG(PT_PREFIX, "TOPA SIZE: %x\n", ret);
 		cpu->pt_mmap = mmap(0, ret, PROT_READ, MAP_SHARED, cpu->pt_fd, 0);
 	}
 	
@@ -386,7 +388,7 @@ void pt_pre_kvm_run(CPUState *cpu){
 				if (cpu->pt_fd){
 					ret = ioctl(cpu->pt_fd, cpu->pt_cmd, cpu->pt_arg);
 					if (ret > 0){
-						//QEMU_PT_PRINTF(PT_PREFIX, "KVM_VMX_PT_DISABLE %d", ret);
+						QEMU_PT_DEBUG(PT_PREFIX, "KVM_VMX_PT_DISABLE %d", ret);
 						pt_dump(cpu, ret);
 						cpu->pt_enabled = false;
 					}
diff --git a/pt/debug.h b/pt/debug.h
index 975c7559..650712ec 100644
--- a/pt/debug.h
+++ b/pt/debug.h
@@ -11,18 +11,26 @@
 
 #pragma once
 
-#define QEMU_PT_PRINT_PREFIX  "[QEMU-PT]\t"
-#define CORE_PREFIX           "Core:      "
-#define MEM_PREFIX            "Memory:    "
-#define RELOAD_PREFIX         "Reload:    "
-#define PT_PREFIX             "PT:        "
-#define INTERFACE_PREFIX      "Interface: "
-#define REDQUEEN_PREFIX       "Redqueen:  "
-#define DISASM_PREFIX         "Disasm:    "
+#include "qemu/osdep.h"
+#include "qemu-common.h"
+#include "qemu/log.h"
+
+#define QEMU_PT_PREFIX		"[QEMU-PT] "
+#define CORE_PREFIX			"Core:  "
+#define MEM_PREFIX			"Mem:   "
+#define RELOAD_PREFIX		"Reload:"
+#define PT_PREFIX			"PT:    "
+#define INTERFACE_PREFIX	"Iface: "
+#define REDQUEEN_PREFIX		"Redq.: "
+#define DISASM_PREFIX		"Diasm: "
 
 #define COLOR	"\033[1;35m"
 #define ENDC	"\033[0m"
 
-
-#define QEMU_PT_PRINTF(PREFIX, format, ...) printf (QEMU_PT_PRINT_PREFIX COLOR PREFIX format ENDC "\n", ##__VA_ARGS__)
-#define QEMU_PT_PRINTF_DBG(PREFIX, format, ...) printf (QEMU_PT_PRINT_PREFIX PREFIX "(%s#:%d)\t"format, __BASE_FILE__, __LINE__, ##__VA_ARGS__)
+/* _PRINTF is the standard logging enabled with -D */
+/* _DEBUG is activated with -t kafl cmdline */
+/* _ERROR is printed to stdout (or logged if logging is enabled) */
+#define QEMU_PT_PRINTF(PREFIX, format, ...) qemu_log(QEMU_PT_PREFIX PREFIX format "\n", ##__VA_ARGS__)
+#define QEMU_PT_DEBUG(PREFIX, format, ...)  qemu_log_mask(LOG_KAFL, QEMU_PT_PREFIX PREFIX format "\n", ##__VA_ARGS__)
+//#define QEMU_PT_DEBUG(PREFIX, format, ...) qemu_log_mask(LOG_KAFL, PREFIX "(%s#:%d)\t"format, __BASE_FILE__, __LINE__, ##__VA_ARGS__)
+#define QEMU_PT_ERROR(PREFIX, format, ...)  printf(QEMU_PT_PREFIX PREFIX format "\n", ##__VA_ARGS__)
diff --git a/pt/disassembler.c b/pt/disassembler.c
index 41f9d817..b7c7dd91 100644
--- a/pt/disassembler.c
+++ b/pt/disassembler.c
@@ -351,7 +351,7 @@ static cofi_type opcode_analyzer(disassembler_t* self, cs_insn *ins){
 			  set_se_instruction(self->redqueen_state, ins->address);
 		  }
       if(ins->id ==X86_INS_CALL || ins->id == X86_INS_LCALL){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "insert hook call %lx", ins->address);
+		  QEMU_PT_DEBUG(REDQUEEN_PREFIX, "insert hook call %lx", ins->address);
 		  set_rq_instruction(self->redqueen_state, ins->address);
       }
 	}
diff --git a/pt/hypercall.c b/pt/hypercall.c
index f11cb501..f7e8f339 100644
--- a/pt/hypercall.c
+++ b/pt/hypercall.c
@@ -271,7 +271,7 @@ void handle_hypercall_kafl_acquire(struct kvm_run *run, CPUState *cpu){
 void handle_hypercall_get_payload(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
 		if(payload_buffer){
-			QEMU_PT_PRINTF(CORE_PREFIX, "Payload Address:\t%lx", (uint64_t)run->hypercall.args[0]);
+			QEMU_PT_PRINTF(CORE_PREFIX, "Payload Address:\t%llx", run->hypercall.args[0]);
 			payload_buffer_guest = (void*)run->hypercall.args[0];
 			write_virtual_memory((uint64_t)payload_buffer_guest, payload_buffer, PAYLOAD_SIZE, cpu);
 		}
@@ -281,7 +281,7 @@ void handle_hypercall_get_payload(struct kvm_run *run, CPUState *cpu){
 void handle_hypercall_get_program(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
 		if(program_buffer){
-			QEMU_PT_PRINTF(CORE_PREFIX, "Program Address:\t%lx", (uint64_t)run->hypercall.args[0]);
+			QEMU_PT_PRINTF(CORE_PREFIX, "Program Address:\t%llx", run->hypercall.args[0]);
 			write_virtual_memory((uint64_t)run->hypercall.args[0], program_buffer, PROGRAM_SIZE, cpu);
 		}
 	}
@@ -303,8 +303,18 @@ void handle_hypercall_kafl_release(struct kvm_run *run, CPUState *cpu){
 
 void handle_hypercall_kafl_cr3(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
-		//QEMU_PT_PRINTF(CORE_PREFIX, "CR3 address:\t\t%lx", (uint64_t)run->hypercall.args[0]);
+		QEMU_PT_PRINTF(CORE_PREFIX, "CR3 address:\t\t%llx", run->hypercall.args[0]);
 		pt_set_cr3(cpu, run->hypercall.args[0], false);
+
+		if (cpu->disassembler_word_width == 0) {
+			if (run->hypercall.longmode) {
+				QEMU_PT_PRINTF(CORE_PREFIX, "Setting arch=64 (longmode=%d)\n", run->hypercall.longmode);
+				cpu->disassembler_word_width = 64;
+			} else {
+				QEMU_PT_PRINTF(CORE_PREFIX, "Setting arch=32 (longmode=%d)\n", run->hypercall.longmode);
+				cpu->disassembler_word_width = 32;
+			}
+		}
 	}
 }
 
@@ -336,13 +346,11 @@ void handle_hypercall_kafl_submit_kasan(struct kvm_run *run, CPUState *cpu){
 
 void handle_hypercall_kafl_panic(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
-#ifdef PANIC_DEBUG
-		if(cpu, run->hypercall.args[0]){
-			QEMU_PT_PRINTF(CORE_PREFIX, "Panic in user mode!");
+		if(run->hypercall.args[0]){
+			QEMU_PT_DEBUG(CORE_PREFIX, "Panic in user mode!");
 		} else{
-			QEMU_PT_PRINTF(CORE_PREFIX, "Panic in kernel mode!");
+			QEMU_PT_DEBUG(CORE_PREFIX, "Panic in kernel mode!");
 		}
-#endif
     QEMU_PT_PRINTF(CORE_PREFIX, "Panic detected during initialization of stage 1 or stage 2 loader");
     hypercall_snd_char(KAFL_PROTO_CRASH);
 	}
@@ -357,13 +365,11 @@ void handle_hypercall_kafl_timeout(struct kvm_run *run, CPUState *cpu){
 
 void handle_hypercall_kafl_kasan(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
-#ifdef PANIC_DEBUG
-		if(cpu, run->hypercall.args[0]){
-			QEMU_PT_PRINTF(CORE_PREFIX, "ASan notification in user mode!");
+		if(run->hypercall.args[0]){
+			QEMU_PT_DEBUG(CORE_PREFIX, "ASan notification in user mode!");
 		} else{
-			QEMU_PT_PRINTF(CORE_PREFIX, "ASan notification in kernel mode!");
+			QEMU_PT_DEBUG(CORE_PREFIX, "ASan notification in kernel mode!");
 		}
-#endif
     QEMU_PT_PRINTF(CORE_PREFIX, "KASAN detected during initialization of stage 1 or stage 2 loader");
     hypercall_snd_char(KAFL_PROTO_KASAN);
 	}
@@ -380,7 +386,7 @@ void handle_hypercall_kafl_lock(struct kvm_run *run, CPUState *cpu){
             error_reportf_err(err, "Error: ");
 
 		qemu_mutex_unlock_iothread();
-		QEMU_PT_PRINTF(CORE_PREFIX, "Done...");
+		QEMU_PT_PRINTF(CORE_PREFIX, "Done. Shutting down..");
 		qemu_system_shutdown_request(SHUTDOWN_CAUSE_HOST_SIGNAL);
 	}
 }
@@ -397,7 +403,7 @@ void handle_hypercall_kafl_info(struct kvm_run *run, CPUState *cpu){
 }
 
 void enable_hprintf(void){
-	QEMU_PT_PRINTF(CORE_PREFIX, "Enable hprintf support");
+	QEMU_PT_DEBUG(CORE_PREFIX, "Enable hprintf support");
 	hprintf_enabled = true;
 }
 
@@ -481,7 +487,7 @@ void handle_hypercall_kafl_user_submit_mode(struct kvm_run *run, CPUState *cpu){
 			cpu->disassembler_word_width = 16;
 			break;
 		default:
-			QEMU_PT_PRINTF(CORE_PREFIX, "target runs in unkown mode...");
+			QEMU_PT_ERROR(CORE_PREFIX, "Error: target uses unknown word width..");
 			cpu->disassembler_word_width = -1;
 			break;
 	}
diff --git a/util/log.c b/util/log.c
index 2da6cb31..cf134bc8 100644
--- a/util/log.c
+++ b/util/log.c
@@ -329,6 +329,8 @@ const QEMULogItem qemu_log_items[] = {
     { CPU_LOG_TB_NOCHAIN, "nochain",
       "do not chain compiled TBs so that \"exec\" and \"cpu\" show\n"
       "complete traces" },
+    { LOG_KAFL, "kafl",
+      "trace kAFL/Redqueen execution" },
 #ifdef CONFIG_PLUGIN
     { CPU_LOG_PLUGIN, "plugin", "output from TCG plugins\n"},
 #endif
-- 
2.26.2

