From ea2ee9763e2ad7b4ea1f104cb6f2105dd329a1c5 Mon Sep 17 00:00:00 2001
From: Steffen Schulz <steffen.schulz@intel.com>
Date: Sat, 28 Sep 2019 02:06:41 +0200
Subject: [PATCH 02/11] Add support for x86_32 panic/kasan handler

---
 pt/hypercall.c | 16 ++++++++++++----
 pt/hypercall.h | 28 +++++++++++++++++++++++++---
 2 files changed, 37 insertions(+), 7 deletions(-)

diff --git a/pt/hypercall.c b/pt/hypercall.c
index 58c133b0..f11cb501 100644
--- a/pt/hypercall.c
+++ b/pt/hypercall.c
@@ -310,18 +310,26 @@ void handle_hypercall_kafl_cr3(struct kvm_run *run, CPUState *cpu){
 
 void handle_hypercall_kafl_submit_panic(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
-		QEMU_PT_PRINTF(CORE_PREFIX, "Panic address:\t%lx", (uint64_t)run->hypercall.args[0]);
+		QEMU_PT_PRINTF(CORE_PREFIX, "Patching PANIC address:\t%llx, longmode=%x\n", run->hypercall.args[0], run->hypercall.longmode);
 		if(notifiers_enabled){
-			write_virtual_memory((uint64_t)run->hypercall.args[0], (uint8_t*)PANIC_PAYLOAD, PAYLOAD_BUFFER_SIZE, cpu);
+			if (run->hypercall.longmode) {
+				write_virtual_memory(run->hypercall.args[0], (uint8_t*)PANIC_PAYLOAD_64, PAYLOAD_BUFFER_SIZE, cpu);
+			} else {
+				write_virtual_memory(run->hypercall.args[0], (uint8_t*)PANIC_PAYLOAD_32, PAYLOAD_BUFFER_SIZE, cpu);
+			}
 		}
 	}
 }
 
 void handle_hypercall_kafl_submit_kasan(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
-		QEMU_PT_PRINTF(CORE_PREFIX, "kASAN address:\t%lx", (uint64_t)run->hypercall.args[0]);
+		QEMU_PT_PRINTF(CORE_PREFIX, "Patching kASAN address:\t%llx, longmode=%x\n", run->hypercall.args[0], run->hypercall.longmode);
 		if(notifiers_enabled){
-			write_virtual_memory((uint64_t)run->hypercall.args[0], (uint8_t*)KASAN_PAYLOAD, PAYLOAD_BUFFER_SIZE, cpu);
+			if (run->hypercall.longmode){
+				write_virtual_memory(run->hypercall.args[0], (uint8_t*)KASAN_PAYLOAD_64, PAYLOAD_BUFFER_SIZE, cpu);
+			} else {
+				write_virtual_memory(run->hypercall.args[0], (uint8_t*)KASAN_PAYLOAD_32, PAYLOAD_BUFFER_SIZE, cpu);
+			}
 		}
 	}
 }
diff --git a/pt/hypercall.h b/pt/hypercall.h
index e1535036..e452bd76 100644
--- a/pt/hypercall.h
+++ b/pt/hypercall.h
@@ -34,18 +34,40 @@ typedef struct{
  * 0f 01 c1                vmcall
  * f4                      hlt
  */
-#define PANIC_PAYLOAD "\xFA\x48\xC7\xC0\x1F\x00\x00\x00\x48\xC7\xC3\x08\x00\x00\x00\x48\xC7\xC1\x00\x00\x00\x00\x0F\x01\xC1\xF4"
+#define PANIC_PAYLOAD_64 "\xFA\x48\xC7\xC0\x1F\x00\x00\x00\x48\xC7\xC3\x08\x00\x00\x00\x48\xC7\xC1\x00\x00\x00\x00\x0F\x01\xC1\xF4"
+
+/*
+ * Panic Notifier Payload (x86-32)
+ * fa                      cli
+ * b8 1f 00 00 00          mov    $0x1f,%eax
+ * bb 08 00 00 00          mov    $0x8,%ebx
+ * b9 00 00 00 00          mov    $0x0,%ecx
+ * 0f 01 c1                vmcall
+ * f4                      hlt
+ */
+#define PANIC_PAYLOAD_32 "\xFA\xB8\x1F\x00\x00\x00\xBB\x08\x00\x00\x00\xB9\x00\x00\x00\x00\x0F\x01\xC1\xF4"
 
 /*
  * KASAN Notifier Payload (x86-64)
  * fa                      cli
  * 48 c7 c0 1f 00 00 00    mov    rax,0x1f
- * 48 c7 c3 08 00 00 00    mov    rbx,0x9
+ * 48 c7 c3 09 00 00 00    mov    rbx,0x9
  * 48 c7 c1 00 00 00 00    mov    rcx,0x0
  * 0f 01 c1                vmcall
  * f4                      hlt
  */
-#define KASAN_PAYLOAD "\xFA\x48\xC7\xC0\x1F\x00\x00\x00\x48\xC7\xC3\x09\x00\x00\x00\x48\xC7\xC1\x00\x00\x00\x00\x0F\x01\xC1\xF4"
+#define KASAN_PAYLOAD_64 "\xFA\x48\xC7\xC0\x1F\x00\x00\x00\x48\xC7\xC3\x09\x00\x00\x00\x48\xC7\xC1\x00\x00\x00\x00\x0F\x01\xC1\xF4"
+
+/*
+ * KASAN Notifier Payload (x86-32)
+ * fa                      cli
+ * b8 1f 00 00 00          mov    $0x1f,%eax
+ * bb 09 00 00 00          mov    $0x9,%ebx
+ * b9 00 00 00 00          mov    $0x0,%ecx
+ * 0f 01 c1                vmcall
+ * f4                      hlt
+ */
+#define KASAN_PAYLOAD_32 "\xFA\xB8\x1F\x00\x00\x00\xBB\x09\x00\x00\x00\xB9\x00\x00\x00\x00\x0F\x01\xC1\xF4"
 
 /*
  * printk Notifier Payload (x86-64)
-- 
2.26.2

