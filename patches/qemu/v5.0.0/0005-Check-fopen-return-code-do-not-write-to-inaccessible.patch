From 41d3e240652631795a66802c86021bf1c4a55f3c Mon Sep 17 00:00:00 2001
From: Steffen Schulz <steffen.schulz@intel.com>
Date: Mon, 4 Nov 2019 17:39:12 +0100
Subject: [PATCH 05/11] Check fopen() return code, do not write to inaccessible
 files (segfault) binary patch

---
 pt.c | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/pt.c b/pt.c
index 60f5751d..4f80dc19 100644
--- a/pt.c
+++ b/pt.c
@@ -216,13 +216,21 @@ int pt_enable_ip_filtering(CPUState *cpu, uint8_t addrn, uint64_t ip_a, uint64_t
 
 #ifdef CREATE_VM_IMAGE
 	FILE* pt_file = fopen(DECODER_MEMORY_IMAGE, "wb");
-	fwrite(buf, sizeof(uint8_t), ip_b-ip_a, pt_file);
-	fclose(pt_file);
+	if (!pt_file) {
+		QEMU_PT_ERROR(CORE_PREFIX, "Error writing file %s)", DECODER_MEMORY_IMAGE);
+	} else {
+		fwrite(buf, sizeof(uint8_t), ip_b-ip_a, pt_file);
+		fclose(pt_file);
+	}
 
 	FILE* rq_file = fopen(redqueen_workdir.target_code_dump, "wb");
-	fwrite(&ip_a, sizeof(uint64_t), 1, rq_file);
-	fwrite(buf, sizeof(uint8_t), ip_b-ip_a, rq_file);
-	fclose(rq_file);
+	if (!rq_file) {
+		QEMU_PT_ERROR(CORE_PREFIX, "Error writing RQ file %s)", redqueen_workdir.target_code_dump);
+	} else {
+		fwrite(&ip_a, sizeof(uint64_t), 1, rq_file);
+		fwrite(buf, sizeof(uint8_t), ip_b-ip_a, rq_file);
+		fclose(rq_file);
+	}
 #endif
 
 
-- 
2.26.2

